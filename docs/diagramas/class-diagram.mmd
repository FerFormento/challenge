classDiagram
    %% Entidades principales
    class PuntoVenta {
        -Integer id
        -String nombre
        +getAccounts(): List~Account~
    }

    class Costo {
        -Integer origen
        -Integer destino
        -int costo
        +deposit(amount: BigDecimal)
        +withdraw(amount: BigDecimal)
    }

    class DijkstraResult {
        -int costoTotal
        -List~Integer~ camino
    }

    %% Servicios
    class CostoService {
        +init(): void
		+cargar(int a, int b, int costo): void
		+remover(int a, int b): void
		+vecinos(int id): Map<Integer, Integer>
		+buscarMejorCamino(int origen, int destino): DijkstraResult
    }

    class PuntoVentaService {
        +init(): void
		+getAll(): List<PuntoVenta>
		+add(PuntoVenta puntoVenta): PuntoVenta
		+update(PuntoVenta puntoVenta): PuntoVenta
		+delete(int id): PuntoVenta
		+get(int id): PuntoVenta
		+exists(int id): boolean
    }

    %% Controladores
    class CostoController
    class PuntoVentaController

    %% Relaciones
    Costo --> PuntoVenta

    CostoController --> CostoService
    PuntoVentaController --> PuntoVentaService
